patterns = [
    {'Name': 'Método de Fábrica', 'Context': 'Creación de objetos', 'Problem': 'Necesidad de crear objetos de diferentes clases relacionadas sin exponer la lógica de creación al cliente.', 'Solution': 'Define una interfaz para crear un objeto, pero permite que las subclases decidan qué clase instanciar.'},

    {'Name': 'Observador', 'Context': 'Comunicación entre objetos', 'Problem': 'Necesidad de que un objeto notifique a otros objetos cuando su estado cambie.', 'Solution': 'Define una dependencia de uno a muchos entre objetos, de modo que cuando un objeto cambia de estado, todos sus dependientes son notificados y actualizados automáticamente.'},

    {'Name': 'Singleton', 'Context': 'Creación de objetos', 'Problem': 'Asegurar que una clase tenga solo una instancia y proporcione un punto de acceso global a la misma.', 'Solution': 'La clase controla la instanciación y se asegura de que solo se cree una instancia.'},

    {'Name': 'Adaptador', 'Context': 'Integración de sistemas', 'Problem': 'Dos clases con interfaces incompatibles necesitan trabajar juntas.', 'Solution': 'Convierte la interfaz de una clase en otra interfaz que el cliente espera, permitiendo que clases incompatibles trabajen juntas.'},

    {'Name': 'Decorador', 'Context': 'Extensión dinámica de comportamiento', 'Problem': 'Necesidad de agregar responsabilidades a objetos de manera dinámica y flexible sin modificar su código.', 'Solution': 'Añade responsabilidades adicionales a un objeto de forma dinámica, proporcionando una alternativa flexible a la subclasificación para extender la funcionalidad.'},

    {'Name': 'Estrategia', 'Context': 'Selección de algoritmos en tiempo de ejecución', 'Problem': 'Necesidad de definir una familia de algoritmos y hacerlos intercambiables para que el cliente pueda elegir uno en tiempo de ejecución.', 'Solution': 'Define una familia de algoritmos, encapsula cada uno, y los hace intercambiables, permitiendo que el algoritmo varíe independientemente de los clientes que lo usan.'},

    {'Name': 'Comando', 'Context': 'Invocación de operaciones', 'Problem': 'Necesidad de encapsular una solicitud como un objeto, permitiendo que los clientes sean parametrizados con colas, solicitudes y operaciones que pueden ser deshechas.', 'Solution': 'Encapsula una solicitud como un objeto, permitiendo que los clientes sean parametrizados con diferentes solicitudes, colas o registros, y soporta operaciones deshechables.'},

    {'Name': 'Fachada', 'Context': 'Simplificación de interfaces', 'Problem': 'Necesidad de proporcionar una interfaz simplificada a un subsistema complejo.', 'Solution': 'Proporciona una interfaz unificada a un conjunto de interfaces en un subsistema, definiendo una interfaz de nivel superior que facilita el uso del subsistema.'},

    {'Name': 'Proxy', 'Context': 'Control de acceso y optimización de recursos', 'Problem': 'Necesidad de controlar el acceso a un objeto o optimizar el uso de recursos costosos.', 'Solution': 'Proporciona un sustituto o apoderado para otro objeto, con el fin de controlar el acceso a él.'},

    {'Name': 'Constructor', 'Context': 'Construcción de objetos complejos', 'Problem': 'Necesidad de construir un objeto complejo paso a paso y permitir que el mismo proceso de construcción cree diferentes representaciones.', 'Solution': 'Separa la construcción de un objeto complejo de su representación, permitiendo que el mismo proceso de construcción cree diferentes representaciones.'},

    {'Name': 'Estado', 'Context': 'Cambio de comportamiento basado en el estado', 'Problem': 'Un objeto cambia su comportamiento cuando cambia su estado interno.', 'Solution': 'Permite que un objeto altere su comportamiento cuando cambia su estado interno. El objeto parecerá cambiar su clase.'},

    {'Name': 'Método Plantilla', 'Context': 'Definición de algoritmos en la superclase', 'Problem': 'Necesidad de definir la estructura de un algoritmo en una clase base, permitiendo que las subclases redefinan ciertos pasos del algoritmo sin cambiar su estructura.', 'Solution': 'Define la estructura de un algoritmo en una operación, delegando algunos pasos a las subclases. El Método Plantilla permite que las subclases redefinan ciertos pasos de un algoritmo sin cambiar su estructura.'},

    {'Name': 'Cadena de Responsabilidad', 'Context': 'Manejo de solicitudes a través de una cadena de manejadores', 'Problem': 'Necesidad de desacoplar el remitente de una solicitud de su manejo, permitiendo que múltiples objetos tengan la oportunidad de manejar la solicitud.', 'Solution': 'Evita acoplar el remitente de una solicitud con su receptor al darle a más de un objeto la oportunidad de manejar la solicitud. Encadena los objetos receptores y pasa la solicitud a lo largo de la cadena hasta que un objeto la maneje.'},

    {'Name': 'Mediador', 'Context': 'Comunicación entre objetos', 'Problem': 'Necesidad de reducir las dependencias directas entre objetos que se comunican, lo que lleva a un sistema fuertemente acoplado.', 'Solution': 'Define un objeto que encapsula cómo interactúan un conjunto de objetos, promoviendo un acoplamiento flexible al evitar que los objetos se refieran entre sí explícitamente.'}
]
